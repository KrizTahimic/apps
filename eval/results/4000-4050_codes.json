{"4000": "n = int(input())\nedges = []\nfor i in range(n-1):\n    a, b = map(int, input().split())\n    edges.append((a, b))\nedges = sorted(edges, key=lambda x: (x[0], x[1]))\na, b, c = edges[0][0], edges[0][1], edges[0][0]\nfor i in range(1, len(edges)):\n    if edges[i][0] == a or edges[i][1] == a:\n        a = edges[i][0]\n    elif edges[i][0] == b or edges[i][1] == b:\n        b = edges[i][0]\n    elif edges[i][0] == c or edges[i][1] == c:\n        c = edges[i][0]\nprint(edges[0][2], edges[1][2], edges[2][2])\n", "4001": "n = int(input())\nd = list(map(int, input().split()))\nd.sort()\nx = 1\ny = 1\nfor i in range(n):\n    if d[i] == 1:\n        x *= 2\n        y *= 2\n    else:\n        x *= d[i]\n        y *= d[i]\nprint(x, y)\n", "4002": "import math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the divisibleSumPairs function below.\ndef divisibleSumPairs(n, k, ar):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (ar[i] + ar[j]) % k == 0:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = divisibleSumPairs(n, k, ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "4003": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n-1):\n    if a[i] < a[i+1]:\n        ans = max(ans, i+1)\nprint(ans)\nfor i in range(ans):\n    if a[i] < a[i+1]:\n        print('L')\n    else:\n        print('R')\n", "4004": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'minimumDistances' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER_ARRAY a as parameter.\n#\n\ndef minimumDistances(a):\n    # Write your code here\n    n = len(a)\n    if n == 1:\n        return 0\n    if n == 2:\n        if a[0] == a[1]:\n            return 0\n        else:\n            return 1\n    if n == 3:\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return 0\n        else:\n            return 1\n    if n == 4:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[1] == a[2] or a[1] == a[3] or a[2] == a[3]:\n            return 0\n        else:\n            return 1\n    if n == 5:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[2] == a[3] or a[2] == a[4] or a[3] == a[4]:\n            return 0\n        else:\n            return 1\n    if n == 6:\n        if a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a", "4005": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    x4, y4 = map(int, input().split())\n    x5, y5 = map(int, input().split())\n    x6, y6 = map(int, input().split())\n\n    # Write Your Code Here:\n    if x1 < x2 and x3 < x4 and x5 < x6:\n        if y1 < y2 and y3 < y4 and y5 < y6:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"", "4006": "n = int(input())\ncount = 0\nfor i in range(n+1):\n    for j in range(i+1):\n        for k in range(j+1):\n            for l in range(k+1):\n                for m in range(l+1):\n                    for n in range(m+1):\n                        for o in range(n+1):\n                            for p in range(o+1):\n                                for q in range(p+1):\n                                    for r in range(q+1):\n                                        for s in range(r+1):\n                                            for t in range(s+1):\n                                                for u in range(t+1):\n                                                    for v in range(u+1):\n                                                        for w in range(v+1):\n                                                            for x in range(w+1):\n                                                                for y in range(x+1):\n                                                                    for z in range(y+1):\n                                                                        if i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z == n:\n                                                                            count += 1\nprint(count)\n", "4007": "n = int(input())\nf = list(map(int, input().split()))\nf.sort()\nfor i in range(n):\n    if f[i] == 0:\n        f[i] = f.index(f[i]) + 1\nprint(*f)\n", "4008": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    k = int(input().strip())\n    a = list(map(int, input().strip().split(' ')))\n    print(\"YES\")\n    for i in range(n):\n        print(a[i])\n", "4009": "n = int(raw_input())\nx = int(raw_input())\ny = int(raw_input())\na = raw_input()\na = list(a)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\na.insert(0,1)\n", "4010": "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n-2):\n    for j in range(i+1, n-1):\n        for k in range(j+1, n):\n            if a[i] == a[j] and a[j] == a[k] and a[i] == a[k]:\n                print(\"YES\")\n                exit()\nprint(\"NO\")\n", "4011": "n = int(input())\na = list(map(int, input().split()))\nf = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    ans = max(ans, a[i])\n    a[i] = f[a[i]]\nprint(ans)", "4012": "t=int(input())\nfor i in range(t):\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    if a>b:\n        a,b=b,a\n    if a>c:\n        a,c=c,a\n    if b>c:\n        b,c=c,b\n    if b%a==0 and c%b==0:\n        print(1)\n        print(a,b,c)\n    else:\n        print(-1)\n", "4013": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a) - min(a))\n", "4014": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER m\n#  ", "4015": "n = int(input())\nm = int(input())\nif n == m:\n    print(0)\nelse:\n    if n % 2 == 0 and m % 2 == 0:\n        print(-1)\n    elif n % 3 == 0 and m % 3 == 0:\n        print(-1)\n    elif n % 2 == 0 and m % 3 == 0:\n        print(-1)\n    elif n % 3 == 0 and m % 2 == 0:\n        print(-1)\n    elif n % 2 == 0 and m % 6 == 0:\n        print(-1)\n    elif n % 3 == 0 and m % 6 == 0:\n        print(-1)\n    elif n % 6 == 0 and m % 2 == 0:\n        print(-1)\n    elif n % 6 == 0 and m % 3 == 0:\n        print(-1)\n    elif n % 2 == 0 and m % 12 == 0:\n        print(-1)\n    elif n % 3 == 0 and m % 12 == 0:\n        print(-1)\n    elif n % 12 == 0 and m % 2 == 0:\n        print(-1)\n    elif n % 12 == 0 and m % 3 == 0:\n        print(-1)\n    elif n % 2 == 0 and m % 24 == 0:\n        print(-1)\n    elif n % 3 == 0 and m % 24 == 0:\n        print(-1)\n    elif n % 24 == 0 and m % 2 == 0:\n        print(-1)\n    elif n % 24 == 0 and m % 3 == 0:\n        print(-1)\n    elif n % 2 == 0 and m % 48 == 0:\n        print(-1)\n    elif n % 3 == 0 and m % 48 == 0:\n        print(-1)\n    elif n % 48 == 0 and m % 2 == 0:\n        print(-1)\n    elif n % 48 == 0 and m % 3 == 0:\n        print(-1)\n    elif n % 2 == 0 and m % 96 == 0:\n        print(-1)\n    elif n % 3 == 0 and m % 96 == 0:\n        print(-1)\n    elif n % 96 == 0 and m % 2 == 0:\n        print(-1)\n    elif n % 96 == 0 and m % 3 == 0:\n        ", "4016": "n = int(input())\nk = int(input())\nt = input()\ns = ''\nfor i in range(n):\n    for j in range(n):\n        if t[i] == t[j]:\n            s += t[i]\n            if len(s) == k:\n                print(s)\n                exit()\n", "4017": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        if sum(a[i:j+1]) == a[j]:\n            ans += 1\n            a.pop(j)\nprint(ans)\nif ans == 0:\n    print(0)\nelse:\n    print(ans)\n    for i in range(ans):\n        print(a.pop(i))\n", "4018": "import math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the minimumCost function below.\ndef minimumCost(n, k):\n    if k > n:\n        return -1\n    cost = 0\n    for i in range(n):\n        cost += n - i\n    return cost\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    result = minimumCost(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "4019": "import sys\nsys.setrecursionlimit(1000000)\nn, m, d = map(int, sys.stdin.readline().split())\ngraph = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, sys.stdin.readline().split())\n    graph[a].append(b)\n    graph[b].append(a)\nfor i in range(1, n + 1):\n    if len(graph[i]) != d:\n        print(\"NO\")\n        sys.exit(0)\nprint(\"YES\")\nfor i in range(1, n + 1):\n    for j in graph[i]:\n        sys.stdout.write(str(i) + \" \" + str(j) + \" \")\n", "4020": "h1 = int(input())\nm1 = int(input())\nh2 = int(input())\nm2 = int(input())\n\nh3 = (h1 + h2) // 2\nm3 = (m1 + m2) // 2\n\nprint(f\"{h3:02}:{m3:02}\")\n", "4021": "a=int(input())\nif a==1:\n    print(1)\nelif a==2:\n    print(2)\nelif a==3:\n    print(3)\nelif a==4:\n    print(4)\nelif a==5:\n    print(5)\nelif a==6:\n    print(6)\nelif a==7:\n    print(7)\nelif a==8:\n    print(8)\nelif a==9:\n    print(9)\nelif a==10:\n    print(10)\nelif a==11:\n    print(11)\nelif a==12:\n    print(12)\nelif a==13:\n    print(13)\nelif a==14:\n    print(14)\nelif a==15:\n    print(15)\nelif a==16:\n    print(16)\nelif a==17:\n    print(17)\nelif a==18:\n    print(18)\nelif a==19:\n    print(19)\nelif a==20:\n    print(20)\nelif a==21:\n    print(21)\nelif a==22:\n    print(22)\nelif a==23:\n    print(23)\nelif a==24:\n    print(24)\nelif a==25:\n    print(25)\nelif a==26:\n    print(26)\nelif a==27:\n    print(27)\nelif a==28:\n    print(28)\nelif a==29:\n    print(29)\nelif a==30:\n    print(30)\nelif a==31:\n    print(31)\nelif a==32:\n    print(32)\nelif a==33:\n    print(33)\nelif a==34:\n    print(34)\nelif a==35:\n    print(35)\nelif a==36:\n    print(36)\nelif a==37:\n    print(37)\nelif a==38:\n    print(38)\nelif a==39:\n    print(39)\nelif a==40:\n    print(40)\nelif a==41:\n    print(41)\nelif a==42:\n    print(42)\nelse:\n    print(43)\n", "4022": "n = int(input())\nsegments = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append([l, r])\nsegments.sort(key=lambda x: (x[0], x[1]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\nsegments.sort(key=lambda x: (x[1], x[0]))\n", "4023": "n = int(input())\na = list(map(int, input().split()))\na.sort()\nfor i in range(1, n):\n    if a[i] != a[i-1]:\n        print(\"NO\")\n        exit()\nprint(\"YES\")\n", "4024": "import math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the minimumSwaps function below.\ndef minimumSwaps(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = minimumSwaps(arr, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = minimumSwaps(arr, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "4025": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    a, b, c = input().strip().split(' ')\n    a, b, c = [int(a), int(b), int(c)]\n    print(math.gcd(a, b, c))\n", "4026": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    t = int(input())\n    for a0 in range(t):\n        n, m = input().rstrip().split()\n        n = int(n)\n        m = int(m)\n        arr = []\n        for a1 in range(n):\n            arr.append(list", "4027": "n = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nsum_a = sum(a)\nsum_b = sum(b)\nprint(abs(sum_a - sum_b))", "4028": "import math\nimport os\nimport random\nimport re\nimport sys\n\nn = int(input().strip())\ns = input().strip()\nprint(math.factorial(2*n)/(math.factorial(n)*math.factorial(n)))\n", "4029": "import math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the minimumSwaps function below.\ndef minimumSwaps(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = minimumSwaps(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "4030": "n = int(input())\ns = input()\nc = [0] * n\nc[0] = 1\nc[1] = 1\nc[2] = 1\nc[3] = 1\nc[4] = 1\nc[5] = 1\nc[6] = 1\nc[7] = 1\nc[8] = 1\nc[9] = 1\nc[10] = 1\nc[11] = 1\nc[12] = 1\nprint(c)\n", "4031": "n=int(input())\ns=[]\nfor i in range(n):\n    s.append(input())\ns.sort()\nfor i in range(n):\n    print(s[i])\n", "4032": "n = int(input())\nk = int(input())\na = list(map(int, input().split()))\na.sort()\nans = 0\nfor i in range(n):\n    if a[i] <= k:\n        ans += 1\nprint(ans)", "4033": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    a = list(map(int, input().strip().split(' ')))\n    b = list(map(int, input().strip().split(' ')))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    ans = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] + b[j] <= n and a[i] + b[j] >= 1:\n                ans += a[i] + b[j]\n    print(ans)\n", "4034": "n = int(input())\ns = input()\ns = list(s)\ns.sort()\nfor i in range(len(s)):\n    if s[i] != s[i+1]:\n        print(\"NO\")\n        exit()\nprint(\"YES\")\nfor i in range(len(s)):\n    print(s[i])\n", "4035": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER A\n#  2. INTEGER B\n#\n\ndef solve(A, B):\n    # Write your code here\n    if A == B:\n        return str(A)\n    if A > B:\n        A, B = B, A\n    if A == 1:\n        return str(A)\n    if A == 2:\n        return str(A)\n    if A == 3:\n        return str(A)\n    if A == 4:\n        return str(A)\n    if A == 5:\n        return str(A)\n    if A == 6:\n        return str(A)\n    if A == 7:\n        return str(A)\n    if A == 8:\n        return str(A)\n    if A == 9:\n        return str(A)\n    if A == 10:\n        return str(A)\n    if A == 11:\n        return str(A)\n    if A == 12:\n        return str(A)\n    if A == 13:\n        return str(A)\n    if A == 14:\n        return str(A)\n    if A == 15:\n        return str(A)\n    if A == 16:\n        return str(A)\n    if A == 17:\n        return str(A)\n    if A == 18:\n        return str(A)\n    if A == 19:\n        return str(A)\n    if A == 20:\n        return str(A)\n    if A == 21:\n        return str(A)\n    if A == 22:\n        return str(A)\n    if A == 23:\n        return str(A)\n    if A == 24:\n        return str(A)\n    if A == 25:\n        return str(A)\n    if A == 26:\n        return str(A)\n    if A == 27:\n        return str(A)\n    if A == 28:\n        return str(A)\n    if A == 29:\n        return str(A)\n    if A == 30:\n        return str(A)\n    if A == 31:\n        return str(A)\n    if A == 32:\n        return str(A)\n    if A == 33:\n        return str(A)\n    if A == 34:\n        return str(A)\n    if A == 35:\n        return str(A)\n    if A", "4036": "n = int(input())\nk = int(input())\na = []\nfor i in range(k):\n    a.append(int(input()))\nfor i in range(k-1):\n    if a[i] < a[i+1] <= 2*a[i]:\n        continue\n    else:\n        print(\"NO\")\n        exit()\nprint(\"YES\")\nfor i in range(k):\n    print(a[i])\n", "4037": "n, r = map(int, input().split())\nprojects = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\nprojects.sort(key=lambda x: x[0])\nprojects.sort(key=lambda x: x[1], reverse=True)\nprojects.sort(key=lambda x: x[1], reverse=True)\nprojects.sort(key=lambda x: x[1], reverse=True)\nprojects.sort(key=lambda x: x[1], reverse=True)\nprojects.sort(key=lambda x: x[1], reverse=True)\nprojects.sort(key=lambda x: x[1], reverse=True)\nprojects.sort(key=lambda x: x[1], reverse=True)\nprojects.sort(key=lambda x: x[1], reverse=True)\nprojects.sort(key=lambda x: x[1], reverse=True)\nprint(len(projects))\n", "4038": "", "4039": "n, r = map(int, input().split())\nprojects = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\nprojects.sort(key=lambda x: x[0])\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n    else:\n        print(\"NO\")\n        exit()\nprint(\"YES\")", "4040": "", "4041": "import sys\nsys.setrecursionlimit(1000000)\nn = int(sys.stdin.readline())\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\nif len(s) < len(t):\n    print(0)\nelse:\n    ans = 0\n    for i in range(len(s)-len(t)+1):\n        if s[i:i+len(t)] == t:\n            ans = max(ans, i+len(t))\n    print(ans)\n", "4042": "import math\nx = float(input())\nprint(int(math.floor(x)), int(math.ceil(x)))\n", "4043": "n, d, k = map(int, input().split())\ngraph = [[] for _ in range(n)]\nfor _ in range(n - 1):\n    u, v = map(int, input().split())\n    graph[u - 1].append(v - 1)\n    graph[v - 1].append(u - 1)\nfor u in range(n):\n    if len(graph[u]) > k:\n        print(\"NO\")\n        exit()\nprint(\"YES\")\nfor u in range(n):\n    for v in graph[u]:\n        print(u + 1, v + 1)", "4044": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    a = int(input().strip())\n    b = int(input().strip())\n    x = int(input().strip())\n    s = \"\"\n    for i in range(a):\n        s = s + \"0\"\n    for i in range(b):\n        s = s + \"1\"\n    for i in range(x):\n        s = s + \"0\"\n    print(s)\n", "4045": "n=int(input())\ns=input()\nt=input()\na=0\nb=0\nc=0\nfor i in s:\n    if i=='a':\n        a=a+1\n    elif i=='b':\n        b=b+1\n    elif i=='c':\n        c=c+1\nfor i in t:\n    if i=='a':\n        a=a+1\n    elif i=='b':\n        b=b+1\n    elif i=='c':\n        c=c+1\nif a==n and b==n and c==n:\n    print(\"YES\")\n    for i in range(3*n):\n        if i%3==0:\n            print(\"a\",end=\"\")\n        elif i%3==1:\n            print(\"b\",end=\"\")\n        else:\n            print(\"c\",end=\"\")\nelse:\n    print(\"NO\")\n", "4046": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'permutations' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER_ARRAY q\n#\n\ndef permutations(n, q):\n    # Write your code here\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 2, 3]\n    if n == 4:\n        return [1, 2, 3, 4]\n    if n == 5:\n        return [1, 2, 3, 4, 5]\n    if n == 6:\n        return [1, 2, 3, 4, 5, 6]\n    if n == 7:\n        return [1, 2, 3, 4, 5, 6, 7]\n    if n == 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8]\n    if n == 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if n == 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    if n == 13:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    if n == 14:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ", "4047": "n = int(input())\nx = list(map(int, input().split()))\nx.sort()\nans = 0\nfor i in range(1, n):\n    if x[i] != x[i-1]:\n        ans += 2\n    else:\n        ans += 1\nprint(ans)\n", "4048": "import sys\nsys.setrecursionlimit(1000000000)\nn = int(input())\ndp = [0] * (n + 1)\ndp[1] = 1\nfor i in range(2, n + 1):\n    if i % 2 == 0:\n        dp[i] = dp[i // 2] + 1\n    else:\n        dp[i] = dp[i - 1] + 1\nprint(dp[n])\n", "4049": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'rockPaperScissors' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER_ARRAY a\n#  3. INTEGER_ARRAY b\n#\n\ndef rockPaperScissors(n, a, b):\n    # Write your code here\n    win = 0\n    lose = 0\n    draw = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            draw += 1\n        elif a[i] == 'rock' and b[i] == 'scissors':\n            win += 1\n        elif a[i] == 'scissors' and b[i] == 'paper':\n            win += 1\n        elif a[i] == 'paper' and b[i] == 'rock':\n            win += 1\n"}