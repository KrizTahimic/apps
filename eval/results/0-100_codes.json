{"0": "import sys\n\ns = sys.stdin.readline().strip()\n\nif not s:\n    sys.stdout.write(\"-1\\n\")\n    sys.exit(0)\n\nans = 0\nfor i in range(len(s)):\n    if s[i] == '[' or s[i] == ']' or s[i] == ':' or s[i] == '|':\n        ans = max(ans, i + 1)\n\nsys.stdout.write(str(ans) + '\\n')\n", "1": "import math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the maximumSumOfDigits function below.\ndef maximumSumOfDigits(x):\n    sum = 0\n    for i in str(x):\n        sum += int(i)\n    return sum\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        x = int(input().strip())\n\n        result = maximumSumOfDigits(x)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "2": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'luckyYear' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER n as parameter.\n#\n\ndef luckyYear(n):\n    # Write your code here\n    return math.floor(math.log10(n))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        n = int(input().strip())\n\n        result = luckyYear(n)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n\nif __name__ == '__main__':\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        n = int(input().strip())\n\n        result = luckyYear(n)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "3": "n = int(input())\nq = int(input())\nl = []\nr = []\nfor i in range(q):\n    l.append(int(input()))\n    r.append(int(input()))\nl.sort()\nr.sort()\nans = 0\nfor i in range(1, n):\n    if l[0] <= i <= r[0]:\n        ans += 1\n    if l[1] <= i <= r[1]:\n        ans += 1\n    if l[2] <= i <= r[2]:\n        ans += 1\n    if l[3] <= i <= r[3]:\n        ans += 1\nprint(ans)", "4": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'timeConversion' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts STRING s as parameter.\n#\n\ndef timeConversion(s):\n    # Write your code here\n    if s[-2:] == 'AM':\n        return s[:-2] + '00'\n    elif s[-2:] == 'PM':\n        return s[:-2] + '12'\n    else:\n        return s\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        s = input()\n\n        result = timeConversion(s)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n", "5": "import sys\n\nn = int(sys.stdin.readline())\npos = int(sys.stdin.readline())\nl = int(sys.stdin.readline())\nr = int(sys.stdin.readline())\n\nif pos < l or pos > r:\n    print(0)\n    sys.exit(0)\n\nif pos == l or pos == r:\n    print(0)\n    sys.exit(0)\n\nif l == r:\n    print(0)\n    sys.exit(0)\n\nif pos == l + 1:\n    print(1)\n    sys.exit(0)\n\nif pos == l + 2:\n    print(2)\n    sys.exit(0)\n\nif pos == l + 3:\n    print(3)\n    sys.exit(0)\n\nif pos == l + 4:\n    print(4)\n    sys.exit(0)\n\nif pos == l + 5:\n    print(5)\n    sys.exit(0)\n\nif pos == l + 6:\n    print(6)\n    sys.exit(0)\n\nif pos == l + 7:\n    print(7)\n    sys.exit(0)\n\nif pos == l + 8:\n    print(8)\n    sys.exit(0)\n\nif pos == l + 9:\n    print(9)\n    sys.exit(0)\n\nif pos == l + 10:\n    print(10)\n    sys.exit(0)\n\nif pos == l + 11:\n    print(11)\n    sys.exit(0)\n\nif pos == l + 12:\n    print(12)\n    sys.exit(0)\n\nif pos == l + 13:\n    print(13)\n    sys.exit(0)\n\nprint(14)\n", "6": "n, x = map(int, input().split())\nd = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\ncurX = x\n\nfor i in range(n):\n    if curX >= d[i]:\n        curX -= min(d[i], curX)\n        curX += h[i]\n    else:\n        break\n\nif curX == 0:\n    print(-1)\nelse:\n    print(curX)", "7": "n = int(input())\nm = int(input())\nday = 1\nwhile True:\n    if n == 0:\n        break\n    if m > n:\n        m = m - n\n        n = 0\n    else:\n        n = n - m\n        m = 0\n    day = day + 1\nprint(day)\n", "8": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING s1\n#  2. STRING s2\n#  3. STRING s3\n#\n\ndef solve(s1, s2, s3):\n    # Write your code here\n    return 0\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s1 = input()\n\n    s2 = input()\n\n    s3", "9": "", "10": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'marsDays' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER n as parameter.\n#\n\ndef marsDays(n):\n    # Write your code here\n    return math.ceil(n/7)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        n = int(input().strip())\n\n        result = marsDays(n)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "11": "n = int(input())\na = int(input())\nb = int(input())\np = int(input())\nq = int(input())\nans = 0\nfor i in range(1, n+1):\n    if i % a == 0 and i % b == 0:\n        ans += p\n    elif i % a == 0:\n        ans += q\nprint(ans)\n", "12": "n = int(input())\ns = input()\nans = 0\nfor i in range(n-1):\n    if s[i] != s[i+1]:\n        ans = max(ans, len(s[i:i+2]))\nprint(ans)\n", "13": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    a = list(map(int, input().strip().split(' ')))\n    b = list(map(int, input().strip().split(' ')))\n    c = list(map(int, input().strip().split(' ')))\n    d = list(map(int, input().strip().split(' ')))\n    e = list(map(int, input().strip().split(' ')))\n    f = list(map(int, input().strip().split(' ')))\n    g = list(map(int, input().strip().split(' ')))\n", "14": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    a = list(map(int, input().strip().split(' ')))\n    b = []\n    for i in range(k):\n        b.append(a.pop(0))\n    for i in range(k):\n        b.append(a.pop(0))\n    for i in range(k):\n        b.append(a.pop(0))\n    for i in range(k):\n        b.append(a.pop(0))\n    for i in range(k):\n        b.append(a.pop(0))\n    for i in range(k):\n        b.append(a.pop(0))\n    print(b)\n", "15": "a = int(input())\nb = int(input())\nc = int(input())\nif a == b:\n    print(\"YES\")\nelse:\n    for i in range(a, a+c, c):\n        if i == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "16": "cnt_1 = int(input())\ncnt_2 = int(input())\ncnt_3 = int(input())\ncnt_4 = int(input())\n\nif cnt_1 == 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 == 0:\n    print(1)\nelse:\n    print(0)\n", "17": "n = int(input())\nk = int(input())\nt = int(input())\nans = 0\nfor i in range(1, n + 1):\n    if i % k == 0:\n        ans += 1\n    else:\n        ans -= 1\nprint(ans)", "18": "s = input()\nt = ''\nu = ''\nfor i in range(len(s)-1,-1,-1):\n    t = t + s[i]\nfor i in range(len(s)):\n    u = u + s[i]\nprint(u)\n", "19": "n = int(input())\np = []\nc = []\nfor i in range(n):\n    p.append(int(input()))\n    c.append(int(input()))\nfor i in range(n-1):\n    if p[i] != p[i+1] or c[i] != c[i+1]:\n        print(\"NO\")\n        exit()\nprint(\"YES\")", "20": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'timeConversion' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts STRING s as parameter.\n#\n\ndef timeConversion(s):\n    # Write your code here\n    hour = int(s[0:2])\n    minute = int(s[3:5])\n    second = int(s[6:8])\n    if s[-2:] == \"PM\":\n        if hour == 12:\n            hour = 0\n        else:\n            hour += 12\n    else:\n        if hour == 12:\n            hour = 0\n        else:\n            hour += 12\n    return str(hour) + \":\" + str(minute) + \":\" + str(second)\n\n\nif __name__ == '__main__':\n    s = input()\n\n    result = timeConversion(s)\n\n    print(result)\n", "21": "import math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the minimumSwaps function below.\ndef minimumSwaps(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = minimumSwaps(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "22": "s = input()\nif s == s[::-1]:\n    print(\"TAK\")\nelse:\n    print(\"NIE\")\n", "23": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().rstrip().split()))\n    b = int(input())\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a.sort()\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    a", "24": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts 2D_INTEGER_ARRAY board as parameter.\n#\n\ndef solve(board):\n    # Write your code here\n    n = len(board)\n    m = len(board[0])\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n            elif board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = 'O'\n            elif board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n            elif board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n            elif board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n            elif board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n            elif board[i][j] == 'X':\n                board[i][j] = 'O'\n            elif board[i][j] == 'O':\n                board[i][j] = 'X'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = '", "25": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().strip().split(' '))))\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    print(matrix)\n", "26": "x, y, z = map(float, raw_input().split())\na = [x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x]\nprint a.index(max(a))\n", "27": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] == 'a':\n            ans += 1\n        elif s[i] == 'b':\n            ans += 2\n        elif s[i] == 'c':\n            ans += 3\n        elif s[i] == 'd':\n            ans += 4\n        elif s[i] == 'e':\n            ans += 5\n        elif s[i] == 'f':\n            ans += 6\n        elif s[i] == 'g':\n            ans += 7\n        elif s[i] == 'h':\n            ans += 8\n        elif s[i] == 'i':\n            ans += 9\n        elif s[i] == 'j':\n            ans += 10\n        elif s[i] == 'k':\n            ans += 11\n        elif s[i] == 'l':\n            ans += 12\n        elif s[i] == 'm':\n            ans += 13\n        elif s[i] == 'n':\n            ans += 14\n        elif s[i] == 'o':\n            ans += 15\n        elif s[i] == 'p':\n            ans += 16\n        elif s[i] == 'q':\n            ans += 17\n        elif s[i] == 'r':\n            ans += 18\n        elif s[i] == 's':\n            ans += 19\n        elif s[i] == 't':\n            ans += 20\n        elif s[i] == 'u':\n            ans += 21\n        elif s[i] == 'v':\n            ans += 22\n        elif s[i] == 'w':\n            ans += 23\n        elif s[i] == 'x':\n            ans += 24\n        elif s[i] == 'y':\n            ans += 25\n        elif s[i] == 'z':\n            ans += 26\n", "28": "import sys\n\nn = int(sys.stdin.readline())\nfiles = []\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    files.append((line[0], int(line[1])))\n\nfiles.sort(key=lambda x: x[0])\nfiles.sort(key=lambda x: x[1], reverse=True)\n\nfiles.sort(key=lambda x: x[0])\nfiles.sort(key=lambda x: x[1], reverse=True)\n\nfiles.sort(key=lambda x: x[0])\nfiles.sort(key=lambda x: x[1], reverse=True)\n\nfiles.sort(key=lambda x: x[0])\nfiles.sort(key=lambda x: x[1], reverse=True)\n\nfiles.sort(key=lambda x: x[0])\nfiles.sort(key=lambda x: x[1], reverse=True", "29": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'luckyTicket' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef luckyTicket(s):\n    # Write your code here\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(s)):\n        sum1 = sum1 + int(s[i])\n        sum2 = sum2 + int(s[len(s)-i-1])\n    if sum1 == sum2:\n        return 0\n    else:\n        return 1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = luckyTicket(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "30": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'trap' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER m\n#  2. INTEGER x\n#\n\ndef trap(m, x):\n    # Write your code here\n    if m == 1:\n        return 0\n    if m == 2:\n        return 1\n    if m == 3:\n        return 2\n    if m == 4:\n        return 3\n    if m == 5:\n        return 4\n    if m == 6:\n        return 5\n    if m == 7:\n        return 6\n    if m == 8:\n        return 7\n    if m == 9:\n        return 8\n    if m == 10:\n        return 9\n    if m == 11:\n        return 10\n    if m == 12:\n        return 11\n    if m == 13:\n        return 12\n    if m == 14:\n        return 13\n", "31": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'birthday' function below.\n#\n# The function is expected to return a LONG_INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER k\n#\n\ndef birthday(n, k):\n    # Write your code here\n    return math.factorial(n)/(math.factorial(n-k)*math.factorial(k))\n\nif __name__ == '__main__':\n    n = int(input().strip())\n\n    k = int(input().strip())\n\n    result = birthday(n, k)\n\n    print(result)\n", "32": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. STRING s\n#\n\ndef solve(n, s):\n    # Write your code here\n    if len(s) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    for t_itr in range(t):\n        n = int(input().strip())\n\n        s = input()\n\n        result = solve(n, s)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n", "33": "import sys\n\na1, b1, a2, b2, L, R = map(int, sys.stdin.readline().split())\na1, b1, a2, b2, L, R = max(a1, a2), max(b1, b2), min(a1, a2), min(b1, b2), min(L, R), max(L, R)\na1, b1, a2, b2, L, R = max(a1, a2), max(b1, b2), min(a1, a2), min(b1, b2), min(L, R), max(L, R)\na1, b1, a2, b2, L, R = max(a1, a2), max(b1, b2), min(a1, a2), min(b1, b2), min(L, R), max(L, R)\na1, b1, a2, b2, L, R = max(a1, a2), max(b1, b2), min(a1, a2), min(b1, b2), min(L, R), max(L, R)\na1, b1, a2, b2, L, R = max(a1, a2), max(b1, b2), min(a1, a2), min(b1, b2), min(L, R), max(L, R)\n\n# End Your Python Code Here:\n", "34": "n = int(input())\na = int(input())\nb = int(input())\nans = 0\nfor i in range(1, min(a, b) + 1):\n    if a % i == 0 and b % i == 0:\n        ans = i\nprint(ans)\n", "35": "n = int(input())\nm = int(input())\nflag = []\nfor i in range(n):\n    flag.append(input())\nfor i in range(n):\n    for j in range(m):\n        if flag[i][j] == 'R':\n            flag[i][j] = 'R'\n        elif flag[i][j] == 'G':\n            flag[i][j] = 'G'\n        elif flag[i][j] == 'B':\n            flag[i][j] = 'B'\nfor i in range(n):\n    for j in range(m):\n        if flag[i][j] == 'R':\n            flag[i][j] = 'R'\n        elif flag[i][j] == 'G':\n            flag[i][j] = 'G'\n        elif flag[i][j] == 'B':\n            flag[i][j] = 'B'\nfor i in range(n):\n    for j in range(m):\n        if flag[i][j] == 'R':\n            flag[i][j] = 'R'\n        elif flag[i][j] == 'G':\n            flag[i][j] = 'G'\n        elif flag[i][j] == 'B':\n            flag[i][j] = 'B'\nfor i in range(n):\n    print(flag[i])\n", "36": "n = int(input())\nx = 0\ny = 0\nfor i in range(n):\n    if i % 2 == 0:\n        x -= 1\n    else:\n        y += 1\n    print(x, y)\n", "37": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER a\n#  2. INTEGER b\n#  3. INTEGER c\n#\n\ndef solve(a, b, c):\n    # Write your code here\n    return \"Yes\" if a*b == c else \"No\"\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = int(input().strip())\n\n    b = int(input().strip())\n\n    c = int(input().strip())\n\n    result = solve(a, b, c)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n", "38": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    l = int(input().strip())\n    a = list(map(int, input().strip().split(' ')))\n    b = list(map(int, input().strip().split(' ')))\n    a.sort()\n    b.sort()\n    if a == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "39": "#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "40": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na.sort(reverse=True)\nb.sort(reverse=True)\nfor i in range(n):\n    if a[i] != b[i]:\n        print(\"rated\")\n        break\n    else:\n        print(\"maybe\")\n", "41": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'nearestZero' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts INTEGER_ARRAY a as parameter.\n#\n\ndef nearestZero(a):\n    # Write your code here\n    d = []\n    for i in range(len(a)):\n        if a[i] == 0:\n            d.append(i)\n    return d\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = nearestZero(a)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n", "42": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    s = input()\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    for m in range(n):\n                        for n in range(n):\n                            for o in range(n):\n                                for p in range(n):\n                                    for q in range(n):\n                                        for r in range(n):\n                                            for s in range(n):\n                                                for t in range(n):\n                                                    for u in range(n):\n                                                        for v in range(n):\n                                                            for w in range(n):\n                                                                for x in range(n):\n                                                                    for y in range(n):\n                                                                        for z in range(n):\n                                                                            for aa in range(n):\n                                                                                for bb in range(n):\n                                                                                    for cc in range(n):\n                                                                                        for dd in range(n):\n                                                                                            for ee in range(n):\n                                                                                                for ff in range(n):\n                                                                                                    for gg in range(n):\n                                                                                                        for hh in range(n):\n                                                                                                            for ii in range(n):\n                                                                                                                for jj in range(n):\n                                                                                                                    for kk in range(n):\n                                                                                                                        for ll in range(n):\n                                                                                                                            for mm in range(n):\n                                                                                                                                for nn in range(n):\n                                                                                                                                    for oo in range(n):\n                                                                                                                                        for pp in range(n):\n                                                                                                                                            for qq in range(n):\n                                                                                                                                                for rr in range(n):\n                                                                                                                                                    for ss in range(n):\n                                                                                                                                                        for tt in range(n):\n                                                                                                                                                           for uu in range(n):\n                                                                                                                                                               for vv in range(n):\n                                                                                                                                                                   for ww in range(n):\n                                                                                                                                                                       for xx in range(n):\n                                                                                                                                                                           for yy in range(n):\n                                                                                                                                                                               for zz in range(n):\n                                                                                                                                                                                   for aaa in range(n):\n                                                                                                                                                                                       for bbb in range(n):\n                                                                                                                                                                                          for ccc in range(n):\n                                                                                                                                                                                              for ddd in range(n", "43": "n = int(input())\nx = []\ny = []\nfor i in range(n):\n    x.append(int(input()))\n    y.append(int(input()))\nfor i in range(n):\n    for j in range(i+1, n):\n        if abs(x[i] - x[j]) + abs(y[i] - y[j]) == 0:\n            print(i+1, j+1)\n", "44": "d = int(input())\nk = int(input())\na = int(input())\nb = int(input())\nt = int(input())\n# End Your Python Code Here:\n\n# Start Your Python Code Here:\nd = int(input())\nk = int(input())\na = int(input())\nb = int(input())\nt = int(input())\n# End Your Python Code Here:\n\n# Start Your Python Code Here:\nd = int(input())\nk = int(input())\na = int(input())\nb = int(input())\nt = int(input())\n# End Your Python Code Here:\n\n# Start Your Python Code Here:\nd = int(input())\nk = int(input())\na = int(input())\nb = int(input())\nt = int(input())\n# End Your Python Code Here:\n", "45": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    a = []\n    for _ in range(k):\n        a.append(int(input().strip()))\n    a.sort()\n    print(a[0])\n    for i in range(1, k):\n        if a[i] % a[i - 1] == 0:\n            print(a[i])\n        else:\n            print(-1)\n", "46": "n,m=map(int,input().split())\nans=0\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        if(i+j)%5==0:\n            ans+=1\nprint(ans)\n", "47": "n, x = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    for j in range(i, n):\n        if x == 0:\n            ans = max(ans, sum(a[i:j+1]))\n        else:\n            ans = max(ans, sum(a[i:j+1] * x))\nprint(ans)", "48": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER m\n#  3. INTEGER k\n#\n\ndef solve(n, m, k):\n    # Write your code here\n    return str(n*m-k+1)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    m = int(input().strip())\n\n    k = int(input().strip())\n\n    result = solve(n, m, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n", "49": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    k = int(input().strip())\n    print(math.factorial(k))\n", "50": "n, m, r = map(int, input().split())\ns = list(map(int, input().split()))\nb = list(map(int, input().split()))\ns.sort()\nb.sort()\nans = 0\nfor i in range(n):\n    if s[i] <= r:\n        ans += s[i]\n        r -= s[i]\nfor i in range(m):\n    if b[i] <= r:\n        ans += b[i]\n        r -= b[i]\nprint(ans)", "51": "def main():\n    t = input()\n    s = \"\"\n    for i in range(len(t)-1):\n        if t[i] == t[i+1]:\n            s += t[i]\n        else:\n            break\n    if len(s) > 0:\n        print(\"YES\")\n        print(s)\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "52": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER n as parameter.\n#\n\ndef solve(n):\n    # Write your code here\n    if n % 2 == 1:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    ", "53": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'antipalindromic' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts STRING s as parameter.\n#\n\ndef antipalindromic(s):\n    # Write your code here\n    n = len(s)\n    if n % 2 == 0:\n        for i in range(0, n, 2):\n            if s[i] != s[n - i - 1]:\n                return 0\n        return n\n    else:\n        return 0\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = antipalindromic(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "54": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    w, m = input().strip().split(' ')\n    w, m = [int(w), int(m)]\n    if m <= w:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "55": "n = int(input())\nk = int(input())\nans = []\nfor i in range(k):\n    a = int(input())\n    ans.append(a)\nans.sort()\nprint(\"Yes\")\nfor i in ans:\n    print(i, end=\" \")\n", "56": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'champagneProblem' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER t\n#\n\ndef champagneProblem(n, t):\n    # Write your code here\n    return int(math.ceil(n/2))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    t = int(input().strip())\n\n    result = champagneProblem(n, t)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "57": "n = int(input())\nx = []\ny = []\nfor i in range(n):\n    x.append(int(input()))\n    y.append(int(input()))\nfor i in range(n):\n    for j in range(i+1, n):\n        if x[i] == x[j] and y[i] == y[j]:\n            print(1)\n            exit()\nprint(-1)\n", "58": "n=int(raw_input())\na=int(raw_input())\nb=int(raw_input())\nif(n==1):\nprint(1)\nelif(n==2):\nprint(2)\nelif(n==3):\nprint(3)\nelif(n==4):\nprint(4)\nelif(n==5):\nprint(5)\nelif(n==6):\nprint(6)\nelse:\nprint(n)\n", "59": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(n-1):\n    if b[i] == 1 and b[i+1] == 0:\n        a[i], a[i+1] = a[i+1], a[i]\nprint(\"YES\" if a == sorted(a) else \"NO\")\n", "60": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superPuperJet' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. STRING s\n#\n\ndef superPuperJet(n, s):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 6\n    if n == 3:\n        return 11\n    if n == 4:\n        return 16\n    if n == 5:\n        return 21\n    if n == 6:\n        return 26\n    if n == 7:\n        return 31\n    if n == 8:\n        return 36\n    if n == 9:\n        return 41\n    if n == 10:\n        return 46\n    if n == 11:\n        return 51\n    if n == 12:\n        return 56\n    if n == 13:\n        return 61\n    if n == 14:\n        return 66\n    if n == 15:\n        return 71\n    if n == 16:\n        return 76\n    if n == 17:\n        return 81\n    if n == 18:\n        return 86", "61": "n = int(input())\nb_x = int(input())\nx = [int(i) for i in input().split()]\nm = int(input())\nb_y = int(input())\ny = [int(i) for i in input().split()]\n\nfor i in range(n):\n    if x[i] > y[i]:\n        print(\">\")\n        break\n    elif x[i] < y[i]:\n        print(\"<\")\n        break\n    else:\n        print(\"=\")\n", "62": "n = int(input())\na = list(map(int, input().split()))\na.sort()\nif a[0] == a[1] == a[2]:\n    print(\"BitLGM\")\nelif a[0] == a[1]:\n    print(\"BitLGM\")\nelif a[1] == a[2]:\n    print(\"BitAryo\")\nelse:\n    print(\"BitLGM\")\n", "63": "n = int(input())\nk = int(input())\na = list(map(int, input().split()))\na.sort()\nans = 0\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if a[i] * a[j] % k == 0:\n            ans += 1\nprint(ans)", "64": "n, k = map(int, raw_input().split())\ns = raw_input()\nans = True\nfor i in range(n):\n    if s[i] == s[i+1]:\n        ans = False\n        break\nif ans:\n    print \"YES\"\nelse:\n    print \"NO\"", "65": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nprint(a[1]-a[0])\n", "66": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER t\n#  2. INTEGER w\n#  3. INTEGER b\n#\n\ndef solve(t, w, b):\n    # Write your code here\n    ans = 0\n    for i in range(1, t+1):\n        if i % w == 0 and i % b == 0:\n            ans += 1\n    return str(ans)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input().strip())\n\n    w = int(input().strip())\n\n    b = int(input().strip())\n\n    result = solve(t, w, b)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n", "67": "x = int(input())\ny = int(input())\nz = int(input())\nif x > y:\n    print(\"+\")\nelif y > x:\n    print(\"-\")\nelse:\n    print(\"?\")\n", "68": "n = int(input())\ns = input()\nx = int(input())\ny = int(input())\n\nif x == 0 and y == 0:\n    print(0)\nelse:\n    for i in range(n):\n        if s[i] == 'U':\n            y += 1\n        elif s[i] == 'D':\n            y -= 1\n        elif s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n\n    if x == 0 and y == 0:\n        print(0)\n    else:\n        print(abs(x) + abs(y) + 1)\n", "69": "n, x = map(int, input().split())\ns = input()\ncnt0 = 0\ncnt1 = 0\nfor i in range(n):\n    if s[i] == '0':\n        cnt0 += 1\n    else:\n        cnt1 += 1\nbalance = cnt0 - cnt1\nif balance == x:\n    print(1)\nelse:\n    print(-1)\n", "70": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'minimumNumbers' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER n and INTEGER k as parameters.\n#\n\ndef minimumNumbers(n, k):\n    # Write your code here\n    n = str(n)\n    k = str(k)\n    n = int(n)\n    k = int(k)\n    count = 0\n    for i in range(len(n)-1, -1, -1):\n        if n[i] == '0':\n            count += 1\n        else:\n            break\n    for i in range(len(k)-1, -1, -1):\n        if k[i] == '0':\n            count += 1\n        else:\n            break\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    result = minimumNumbers(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "71": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER m\n#  3. INTEGER k\n#  4. INTEGER x\n#  5. INTEGER y\n#\n\ndef solve(n, m, k, x, y):\n    # Write your code here\n    if n == 1:\n        return [1, 1, 1]\n    ", "72": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input())\n    a = input()\n    b = input()\n    c = input()\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    a.sort()\n    b.sort()\n    c.sort()\n    a = ''.join(a)\n    b = ''.join(b)\n    c = ''.join(c)\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    a.sort()\n    b.sort()\n    c.sort()\n    a = ''.join(a)\n    b = ''.join(b)\n    c = ''.join(c)\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    a.sort()\n    b.sort()\n    c.sort()\n    a = ''.join(a)\n    b = ''.join(b)\n    c = ''.join(c)\n    a = list(a)\n    b = list(", "73": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER c\n#  2. INTEGER v_0\n#  3. INTEGER v_1\n#  4. INTEGER a\n#  5. INTEGER l\n#\n\ndef solve(c, v_0, v_1, a, l):\n    # Write your code here\n    if v_0 > v_1:\n        v_0, v_1 = v_1, v_0\n    if v_1 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_1 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        return -1\n    if v_0 > c:\n        ", "74": "n=int(raw_input())\nk=0\nfor i in range(1,n+1):\n    if n%i==0:\n        k=k+1\n        if k==1:\n            print i\n        elif k==2:\n            print i,n/i\n        elif k==3:\n            print i,n/i,n/(n/i)\n        else:\n            print i,n/i,n/(n/i),n/(n/(n/i))\n", "75": "n, m = map(int, input().split())\nfield = []\nfor i in range(n):\n    field.append(list(input()))\n    \ndef check(x, y):\n    if x < 0 or x >= n or y < 0 or y >= m:\n        return False\n    if field[x][y] == \"*\":\n        return False\n    return True\n    \ndef bomb(x, y):\n    if x < 0 or x >= n or y < 0 or y >= m:\n        return False\n    if field[x][y] == \"*\":\n        return False\n    if field[x][y] == \".\":\n        field[x][y] = \"*\"\n        bomb(x-1, y)\n        bomb(x+1, y)\n        bomb(x, y-1)\n        bomb(x, y+1)\n        return True\n    return False\n    \nfor i in range(n):\n    for j in range(m):\n        if check(i, j) and bomb(i, j):\n            print(\"YES\")\n            print(i+1, j+1)\n            exit()\n        \nprint(\"NO\")\n", "76": "n, m, a, b = map(int, input().split())\nif n % m == 0:\n    print(0)\nelse:\n    print(a * (n // m) + b * (n % m))", "77": "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] + a[j] % 2 == 1:\n            ans = max(ans, a[i] + a[j])\nprint(ans)\n", "78": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER T\n#  3. 2D_INTEGER_ARRAY songs\n#\n\ndef solve(n, T, songs):\n    # Write your code here\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if songs", "79": "import math\nimport random\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\ndef main():\n    m = int(input())\n    a = []\n    while True:\n        x = random.randint(1, m)\n        a.append(x)\n        if gcd(a) == 1:\n            break\n    print(gcd(a))\nif __name__ == '__main__':\n    main()\n", "80": "from math import gcd, lcm\nl, r, x, y = map(int, input().split())\nans = 0\nfor i in range(l, r+1):\n    for j in range(l, r+1):\n        if gcd(i, j) == x and lcm(i, j) == y:\n            ans += 1\nprint(ans)\n", "81": "import math\na, b = map(int, input().split())\nlcm = math.lcm(a, b)\nfor i in range(1, lcm + 1):\n    if i % a == 0 and i % b == 0:\n        print(i)\n        break\n", "82": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    a = list(map(int, input().strip().split(' ')))\n    print(math.ceil(sum(a)/n))\n", "83": "n = int(input())\na = list(map(int, input().split()))\ncount = 0\nfor i in range(n):\n    if a[i] > 0:\n        count += 1\nif count >= n//2:\n    print(a[i])\nelse:\n    print(0)\n", "84": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input())\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i+j == n:\n                ans += 1\n    print(ans)\n", "85": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER a1\n#  2. INTEGER b1\n#  3. INTEGER a2\n#  4. INTEGER b2\n#\n\ndef solve(a1, b1, a2, b2):\n    # Write your code here\n    if a1 == a2 and b1 == b2:\n        return 0\n    elif a1 == a2:\n        return 1\n    elif b1 == b2:\n        return 2\n    else:\n        return 3\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a1b1 = input().split()\n\n    a1 = int(a1b1[0])\n\n    b1 = int(a1b1[1])\n\n    a2b2 = input().split()\n\n    a2 = int(a2b2[0])\n\n    b2 = int(a2b2[1])\n\n    result = solve(a1, b1, a2, b2)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "86": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x_p\n#  2. INTEGER y_p\n#  3. INTEGER x_v\n#  4. INTEGER y_v\n#\n\ndef solve(x_p, y_p, x_v, y_v):\n    # Write your code here\n    if x_p == 0 and y_p == 0:\n        return \"Polycarp\"\n    if x_v == 0 and y_v == 0:\n        return \"Vasiliy\"\n    if x_p == x_v and y_p == y_v:\n        return \"Polycarp\"\n    if x_p == x_v + 1 and y_p == y_v:\n        return \"Vasiliy\"\n    if x_p == x_v and y_p == y_v - 1:\n        return \"Vasiliy\"\n    if x_p == x_v - 1 and y_p == y_v:\n        return \"Polycarp\"\n    if x_p == x_v and y_p == y_v - 1:\n        return \"Polycarp\"\n    if x_p == x_v - 1 and y_p == y_v - 1:\n        return \"Vasiliy\"\n    if x_p == x_v + 1 and y_p == y_v - 1:\n        return \"Polycarp\"\n    if x_p == x_v + 1 and y_p == y_v:\n        return \"Vasiliy\"\n    if x_p == x_v + 1 and y_p == y_v + 1:\n        return \"Polycarp\"\n    if x_p == x_v and y_p == y_v + 1:\n        return \"Vasiliy\"\n    if x_p == x_v - 1 and y_p == y_v + 1:\n        return \"Polycarp\"\n    if x_p == x_v - 1 and y_p == y_v:\n        return \"Vasiliy\"\n    if x_p == x_v - 1 and y_p == y_v - 1:\n        return \"Polycarp\"\n    if x_p == x_v and y_p == y_v", "87": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    d = int(input())\n    m = int(input())\n    if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n        if d == 1 or d == 3 or d == 5 or d == 7 or d == 8 or d == 10 or d == 12:\n            print(7)\n        else:\n            print(6)\n    elif m == 4 or m == 6 or m == 9 or m == 11:\n        if d == 2 or d == 4 or d == 6 or d == 8 or d == 9 or d == 11:\n            print(7)\n        else:\n            print(6)\n", "88": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countZeros' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER a and INTEGER b as parameters.\n#\n\ndef countZeros(a, b):\n    # Write your code here\n    count = 0\n    for i in range(a, b+1):\n        if str(i).count('0') == 1:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    a = int(first_multiple_input[0])\n\n    b = int(first_multiple_input[1])\n\n    result = countZeros(a, b)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "89": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'countLayers' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER N as parameter.\n#\n\ndef countLayers(N):\n    # Write your code here\n    return math.ceil(N/2)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    N = int(input().strip())\n\n    result = countLayers(N)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n", "90": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n, k, s = input().strip().split(' ')\n    n, k, s = [int(n), int(k), int(s)]\n    a = list(map(int, input().strip().split(' ')))\n    a.sort()\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] + a[j - 1] == s:\n                ans += 1\n    print(ans)\n", "91": "if __name__ == '__main__':\n    T = int(input())\n    for t in range(T):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        v = [0] * n\n        for i in range(n):\n            if a[i] == 0:\n                v[i] = 0\n            elif a[i] == 1:\n                v[i] = 1\n            elif a[i] == 2:\n                v[i] = 2\n            elif a[i] == 3:\n                v[i] = 3\n            elif a[i] == 4:\n                v[i] = 4\n            elif a[i] == 5:\n                v[i] = 5\n            elif a[i] == 6:\n                v[i] = 6\n            elif a[i] == 7:\n                v[i] = 7\n            elif a[i] == 8:\n                v[i] = 8\n            elif a[i] == 9:\n                v[i] = 9\n            elif a[i] == 10:\n                v[i] = 10\n        for i in range(n):\n            if v[i] != a[i]:\n                print(\"NO\")\n                exit()\n        print(\"YES\")\n", "92": "import math\na, b, c = map(int, input().split())\nans = 0\nfor i in range(1, a + 1):\n    for j in range(1, b + 1):\n        for k in range(1, c + 1):\n            ans += math.factorial(i) * math.factorial(j) * math.factorial(k)\nans %= 10**9 + 7\nprint(ans)", "93": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. STRING s1\n#  2. STRING s2\n#\n\ndef solve(s1, s2):\n    # Write your code here\n    return \"YES\" if s1 == s2 else \"NO\"\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input().strip())\n\n    for q_itr in range(q):\n        s1 = input()\n\n        s2 = input()\n\n        result = solve(s1, s2)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n", "94": "n = int(input())\nk = int(input())\nx = 0\nwhile k > 0:\n    x = x * n + k % n\n    k = k // n\nprint(x)", "95": "n=int(input())\na=list(map(int,input().split()))\nif a[0]<a[1] and a[1]<a[2] and a[2]<a[3] and a[3]<a[4] and a[4]<a[5] and a[5]<a[6] and a[6]<a[7]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "96": "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    a = list(map(int, input().strip().split(' ')))\n    print(max(a))\n", "97": "n, m, x, y, v_x, v_y = map(int, input().split())\nif v_x == 0 and v_y == 0:\n    print(-1)\nelse:\n    if v_x == 1 and v_y == 1:\n        print(0, 0)\n    elif v_x == 1 and v_y == -1:\n        print(n - 1, 0)\n    elif v_x == -1 and v_y == 1:\n        print(0, m - 1)\n    elif v_x == -1 and v_y == -1:\n        print(n - 1, m - 1)\n", "98": "a_1, b_1 = map(int, input().split())\na_2, b_2 = map(int, input().split())\na_3, b_3 = map(int, input().split())\nif a_1*b_1 == a_2*b_2 and a_1*b_1 == a_3*b_3:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "99": "import math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'solve' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER b_1\n#  2. INTEGER q\n#  3. INTEGER l\n#  4. INTEGER m\n#  5. INTEGER a_1\n#  6. INTEGER a_2\n#  7. INTEGER a_3\n#  8. INTEGER a_4\n#  9. INTEGER a_5\n#  10. INTEGER a_6\n#  11. INTEGER a_7\n#  12. INTEGER a_8\n#  13. INTEGER a_9\n#  14. INTEGER a_10\n#  15. INTEGER a_11\n#  16. INTEGER a_12\n#  17. INTEGER a_13\n#  18. INTEGER a_14\n#  19. INTEGER a_15\n#  20. INTEGER a_16\n#  21. INTEGER a_17\n#  22. INTEGER a_18\n#  23. INTEGER a_19\n#  24. INTEGER a_20\n#  25. INTEGER a_21\n#  26. INTEGER a"}